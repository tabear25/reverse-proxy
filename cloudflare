addEventListener('fetch', (event) => {
  event.respondWith(handleRequest(event.request));
});

async function handleRequest(request) {
  try {
    const url = new URL(request.url);

    if (url.pathname.startsWith('/redirect/')) {
      // パスからターゲットURLを抽出し、検証する
      let targetUrlStr = decodeURIComponent(url.pathname.slice(10));
      if (url.search) {
        targetUrlStr += url.search;
      }
      let targetUrl;
      try {
        targetUrl = new URL(targetUrlStr);
      } catch (err) {
        return new Response("Invalid redirect URL", { status: 400 });
      }
      return Response.redirect(targetUrl.href, 302);
    }

    if (url.pathname === '/') {
      return new Response(`
        Usage:
          ${url.origin}/<url>
      `);
    }

    if (request.method === 'OPTIONS') {
      return new Response(null, {
        status: 200,
        headers: {
          'Access-Control-Allow-Origin': '*',
          'Access-Control-Allow-Methods': 'GET, HEAD, POST, OPTIONS',
          'Access-Control-Allow-Headers': 'Authorization, Content-Type, Notion-Version',
        },
      });
    }

    // オリジン以降のURLを抽出して転送先のURLとする
    const targetUrlStr = request.url.slice(url.origin.length + 1);
    const targetUrl = new URL(targetUrlStr);
    
    const headers = new Headers(request.headers);
    if (targetUrl.hostname === 'api.notion.com' && !headers.has('Notion-Version')) {
      const notionVersion = '2021-05-13';
      headers.set('Notion-Version', notionVersion);
    }

    let response = await fetch(targetUrl.href, {
      method: request.method,
      headers: headers,
      redirect: 'follow',
      body: request.body,
    });
    response = new Response(response.body, response);
    response.headers.set('Access-Control-Allow-Origin', '*');
    response.headers.set('Access-Control-Allow-Methods', 'GET, HEAD, POST, OPTIONS');
    response.headers.set('Access-Control-Allow-Headers', 'Origin, X-Requested-With, Accept, Authorization, Content-Type, Notion-Version');

    return response;
  } catch (e) {
    return new Response("Internal Server Error", { status: 500 });
  }
}
