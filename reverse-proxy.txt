addEventListener('fetch', event => {
  event.respondWith(handleRequest(event.request))
})

async function handleRequest(request) {
  // リクエスト URL を解析
  const url = new URL(request.url)
  // パス部分から先頭のスラッシュを除いた文字列をターゲット URL として扱う
  const target = url.pathname.slice(1)
  
  let targetUrl
  try {
    targetUrl = new URL(target)
  } catch (error) {
    return new Response('Invalid target URL', { status: 400 })
  }
  
  // 新しいリクエストの初期設定を作成
  // 元リクエストのメソッド・ヘッダー・ボディ等を引き継ぐ
  const newHeaders = new Headers(request.headers)
  
  // ターゲットが api.notion.com の場合のみ Notion-Version ヘッダーを追加
  if (targetUrl.hostname === 'api.notion.com') {
    newHeaders.set('Notion-Version', '2022-06-28')  // 必要な API バージョンに合わせて変更
  }
  
  // リクエストメソッドによってはボディの取り扱いが必要
  const init = {
    method: request.method,
    headers: newHeaders,
    // GET や HEAD の場合はボディ不要、それ以外の場合はリクエストボディを渡す
    body: request.method === 'GET' || request.method === 'HEAD' ? null : request.body,
    redirect: 'manual'
  }
  
  // 新しいリクエストを作成し、ターゲットに向けてリバースプロキシ
  const proxyRequest = new Request(targetUrl.toString(), init)
  return fetch(proxyRequest)
}
